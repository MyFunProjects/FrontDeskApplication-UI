{"version":3,"sources":["images/close.png","logo.svg","components/ExistingBookingModel.js","components/NewBookingModel.js","components/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ExistingBookingModel","React","memo","props","useState","bookingID","seBookingID","bookingData","setBookingData","useEffect","fetch","then","response","json","className","onClick","onClose","align","width","height","src","require","style","borderColor","maxLength","size","type","onChange","e","target","value","map","bookingEntry","index","patientDetails","firstName","age","doctorDetails","specialist","bookedSlot","comments","status","NewBookingModel","HomePage","showNewBooking","setShowNewBooking","showExistingBooking","setShowExistingBooking","showHomePage","setShowHomePage","hidePopUpModel","useCallback","showNewBookingModel","ShowExistingBookingModel","HomePageContent","border","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f63c1e73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/close.a773ab92.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\n export const ExistingBookingModel = React.memo(props => {\r\n   \r\n   const [bookingID,seBookingID] = React.useState(\"\");\r\n   const [bookingData, setBookingData] = React.useState([]);\r\n\r\n   // Load full list when the component gets mounted and filter gets updated\r\n   React.useEffect(() => {\r\n      fetch(`https://frontdesk-app-engine.herokuapp.com/frontdesk/booking/${bookingID}`)  \r\n         .then(response => response.json())\r\n         .then(json => setBookingData(json));\r\n     }, [bookingID]);\r\n\r\n return( \r\n     <div className=\"ExistingBookingFrame\">\r\n     <div><img  onClick={props.onClose}  align =\"right\" width=\"50\" height =\"50\" src={require('../images/close.png')} /></div>\r\n     <div className=\"ExistingBookingContent\">   \r\n       <table>\r\n         <tr><td>Booking ID : </td><td><input style={{borderColor: \"blue\"}}  maxLength=\"2\" size=\"4\" type=\"text\" onChange={(e) => seBookingID(e.target.value)}></input></td></tr>\r\n         </table>         \r\n         <div>{bookingData.map((bookingEntry, index) => (\r\n           <div>\r\n           <table>\r\n             <tr><td><b>Paetient Details:</b></td><td></td></tr>  \r\n            <tr><td>Name : </td><td> {bookingEntry.patientDetails && bookingEntry.patientDetails.firstName}</td></tr>\r\n            <tr><td>Age : </td><td>{bookingEntry.patientDetails && bookingEntry.patientDetails.age}</td></tr>\r\n            <tr><td><b>Doctor Details:</b></td><td></td></tr>  \r\n            <tr><td>Name : </td><td>{bookingEntry.doctorDetails && bookingEntry.doctorDetails.firstName}</td></tr>\r\n            <tr><td>Specialization</td><td>{bookingEntry.doctorDetails && bookingEntry.doctorDetails.specialist}</td></tr>\r\n            <tr><td><b>Booking Details:</b></td><td></td></tr> \r\n            <tr><td>BookedSlot : </td><td>{bookingEntry.bookedSlot}</td></tr>\r\n            <tr><td>Comments : </td><td>{bookingEntry.comments}</td></tr>\r\n            <tr><td>Status : </td><td>{bookingEntry.status}</td></tr>\r\n             </table>         \r\n          </div>\r\n        ))}</div>  \r\n     </div>\r\n     </div>      \r\n    );\r\n   });\r\n\r\n","import React from \"react\";\r\n\r\nexport const NewBookingModel  = React.memo(props => {   \r\n   return(  \r\n    <div className=\"NewBookingFrame\">   \r\n    <img  onClick={props.onClose} align =\"right\" width=\"50\" height =\"50\" src={require('../images/close.png')} />\r\n     <div className=\"NewBookingContent\">This is a New Booking Frame</div>\r\n    </div>\r\n    );\r\n   });","import React from \"react\";\nimport {ExistingBookingModel} from \"./ExistingBookingModel\";\nimport {NewBookingModel} from \"./NewBookingModel\"\n\nexport const HomePage = () => {\n\n  const [showNewBooking, setShowNewBooking] = React.useState(false);  \n  const [showExistingBooking, setShowExistingBooking] = React.useState(false);\n  const [showHomePage ,setShowHomePage] = React.useState(true);\n\n  const hidePopUpModel = React.useCallback(() => hideModel(), []); \n  const showNewBookingModel = React.useCallback(() => showNewBookingFrame(), []); \n  const ShowExistingBookingModel = React.useCallback(() => showExistingBookingFrame(), []); \n\n  function showNewBookingFrame() {\n    setShowNewBooking(true);\n    setShowExistingBooking(false)\n    setShowHomePage(false);\n  }\n  function showExistingBookingFrame() {\n    setShowNewBooking(false);\n    setShowExistingBooking(true);\n    setShowHomePage(false);\n  }\n  function hideModel() {\n    setShowNewBooking(false);\n    setShowExistingBooking(false);\n    setShowHomePage(true);\n  }\n\n  return (\n    <>\n<div>\n{showHomePage && <HomePageContent showNewBooking={showNewBookingModel} showExistingBooking={ShowExistingBookingModel}/>}\n{showNewBooking && <NewBookingModel onClose={hidePopUpModel}/>}\n{showExistingBooking && <ExistingBookingModel onClose={hidePopUpModel}/>}\n</div>\n </>\n  );\n}\nexport const HomePageContent = React.memo(props => {\n  return (    \n    <div className=\"HomePageContent\">\n      <table border=\"0\">\n        <tr><a onClick={props.showNewBooking}><div className=\"FontHomePageContent\">New Booking</div></a><td></td></tr>\n        <tr><td><br/></td></tr>\n        <tr><td><a onClick={props.showExistingBooking}><div className=\"FontHomePageContent\">Existing Booking</div></a></td></tr>\n        </table>   \n    </div>\n    );\n  });\n\n\n\n\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport { HomePage } from \"./components/HomePage\";\n\nfunction App() {\n  return (\n    <>\n    <div className=\"App\">         \n    <HomePage />     \n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}